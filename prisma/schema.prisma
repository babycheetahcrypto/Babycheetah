generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  telegramId        Int               @unique
  username          String
  firstName         String?
  lastName          String?
  coins             Int               @default(0)
  level             Int               @default(1)
  exp               Int               @default(0)
  profitPerHour     Int               @default(0)
  shopItems         ShopItem[]
  premiumShopItems  PremiumShopItem[]
  tasks             Task[]
  dailyReward       DailyReward?
  unlockedLevels    Int[]
  clickPower        Int               @default(1)
  friendsCoins      Json?
  energy            Int               @default(500)
  pphAccumulated    Float             @default(0)
  multiplier        Int               @default(1)
  multiplierEndTime DateTime?
  boosterCooldown   DateTime?
  selectedCoinImage String?
  settings          Json?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model ShopItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  image      String
  basePrice  Int
  baseProfit Int
  level      Int      @default(1)
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PremiumShopItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  basePrice Int
  effect    String
  level     Int      @default(1)
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  reward      Int
  progress    Int      @default(0)
  maxProgress Int?
  completed   Boolean  @default(false)
  claimed     Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DailyReward {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  lastClaimed DateTime?
  streak      Int       @default(0)
  day         Int       @default(1)
  completed   Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

