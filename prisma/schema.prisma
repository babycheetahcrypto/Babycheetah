generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  telegramId        Int               @unique
  username          String
  firstName   String?
  lastName    String?
  coins             Float             @default(0)
  level             Int               @default(1)
  exp               Float             @default(0)
  profilePhoto      String?
  shopItems         ShopItem[]
  premiumShopItems  PremiumShopItem[]
  tasks             Task[]
  dailyReward       DailyReward?
  unlockedLevels    Int[]             @default([1])
  clickPower        Int               @default(1)
  friendsCoins      Json?             @default("{}")
  energy            Int               @default(500)
  pphAccumulated    Float             @default(0)
  multiplier        Float             @default(1)
  multiplierEndTime DateTime?
  boosterCooldown   DateTime?
  selectedCoinImage String?
  settings          Json              @default("{\"vibration\": true, \"backgroundMusic\": false, \"soundEffect\": true}")
  profitPerHour     Float             @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  trophies          Trophy[]
  referralRewards   ReferralReward[]
  sentInvites       FriendInvite[]    @relation("SentInvites")
  receivedInvites   FriendInvite[]    @relation("ReceivedInvites")
}

model ShopItem {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @db.ObjectId
  name        String
  image       String
  basePrice   Float
  baseProfit  Float
  level       Int    @default(1)
  quantity    Int    @default(0)
  user        User   @relation(fields: [userId], references: [id])
}

model PremiumShopItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  name        String
  image       String
  basePrice   Float
  effect      String
  level       Int     @default(1)
  duration    Int?
  user        User    @relation(fields: [userId], references: [id])
}

model Task {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @db.ObjectId
  type         String
  description  String
  progress     Int       @default(0)
  maxProgress  Int
  reward       Float
  completed    Boolean   @default(false)
  claimed      Boolean   @default(false)
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id])
}

model Trophy {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  name        String
  description String
  image       String
  requirement Float
  reward      Float
  claimed     Boolean   @default(false)
  unlockedAt  DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model DailyReward {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @unique @db.ObjectId
  lastClaimed DateTime?
  streak      Int       @default(0)
  day         Int       @default(1)
  completed   Boolean   @default(false)
  user        User      @relation(fields: [userId], references: [id])
}

model ReferralReward {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  referredId  String
  amount      Float
  claimed     Boolean   @default(false)
  claimedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
}

model FriendInvite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  inviterId String   @db.ObjectId
  inviteeId String   @db.ObjectId
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  inviter   User     @relation("SentInvites", fields: [inviterId], references: [id])
  invitee   User     @relation("ReceivedInvites", fields: [inviteeId], references: [id])
}

